Parameters:

Resources:

#Security groups

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group, allow http access
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Server Security Group, allow http access
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SecurityGroupId: !Ref LoadBalancerSecurityGroup

#Launch Template for the Web Servers

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName:
        !Sub "web-servers-template"
      LaunchTemplateData:
        UserData:
          echo "Hello, I'm a server ready to work"
        ImageId: !Ref ImageId
        SecurityGroupIds:
        - !Ref WebServerSecurityGroup
        InstanteType: t2.micro
        IamInstanceProfile:
          Name: 
        BlockDeviceMapping:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 50

#IAM EC2 Profile
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      RoleName: web-servers-instance-role
      AssumeRolePoliceDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject*'
              - 's3:GetObject*'
              - 's3:DeleteObject*'
              Resource:
              - !Ref S3Bucket
  WebServerInstanceProfile:
   Type: AWS::IAM::InstanceProfile
   Properties:
     Path: '/'
     Roles: 
     - !Ref WebServerInstanceRole

  WebAppAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PUB1-SN"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: 2
      DesiredCapacity: 2
      MaxSize: 4
      TargetGroupARNs:
      - !Ref WebAppTargetGroup

WebAppTargetGroup:
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
    HealthCheckIntervalSeconds: 30
    HealthCheckPath: /
    HealthCheckProtocol: HTTP
    HealthCheckTimeoutSeconds: 10
    HealthyThresholdCount: 3
    Port: 80
    Protocol: HTTP
    UnhealthyThresholdCount: 3
    VpcId:
      Fn::ImportValue:
        !Sub "${EnvironmentName}-VPCID"

WebAppLB:
  Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Properties:
    Subnets:
    - Fn::ImportValue:
        !Sub "${EnvironmentName}-PUB1-SN"
    SecurityGroups:
    - !Ref LoadBalancerSecurityGroup

Listener:
  Type: AWS::ElasticLoadBalancingV2::Listener
  Properties:
    DefaultActions:
    - Type: forward
      TargetGroupArn:
        Ref: WebAppTargetGroup
    LoadBalancerArn:
      Ref: WebAppLB
    Port: 80
    Protocol: HTTP

ListenerRule:
  Type: AWS::ElasticLoadBalancerV2::ListenerRule
  Properties:
    Actions: 
    - Type: forward
      TargetGroupArn:
        Ref: WebAppTargetGroup
    Conditions:
    - Field: path-pattern
      Values: [/]
    ListenerArn:
      Ref: Listener
    Priority: 1









    


Outputs: